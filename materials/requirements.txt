Biblioteka do realizacji operacji MinHash z wykorzystaniem rozszerze� SIMD.
1. Zaimplementowana w c++,

2. Wieloplatformowa (windows/linux),
- ma by� kompilowalna pod windowsem i pod systemem linuksowym

3. Obs�uga SSE2, AVX, AVX2 (wykrywanie dost�pnych instrukcji, ka�dy plik CPP kompilowany z innymi parametrami).
- d�ugo�� wektora nale�y uzale�ni� od dost�pnych rozszerze�
- musi by� jaka� funkcja wykrywaj�ca dost�pne rozszerzenia
- w zale�no�ci od tego co jest dost�pne to wykorzystujemy to rozszerzenie

4. Wykorzystanie Intel Intrinsics (https://software.intel.com/sites/landingpage/IntrinsicsGuide/#)
- jest zestaw dost�pnych technologii
- dla danej technologii jest zdefiniowanuy typ
- nale�y sprawdzi� co to za typ i co dana instrukcja dok�adnie robi
- �eby z tego korzysta� nale�y zincludowa� odpowiedni plik i to jest tyle
- instrukcje powinny dzia�a� pod Intelem i pod AMD

5. Na pocz�tek operacje na argumentach 64-bit

6. �rodowisko testowe:
 a) zaimplementowa� wariant skalarny,
 b) por�wna� poprawno��,
 c) pomierzy� czasy wykonania
- napisa� prost� aplikacj� testuj�c� zaimplementowan� bibliotek�

7. By� mo�e warto wykorzysta� szablony
- zrobi� typ wyliczeniowy, kt�ry reprezentuje mo�liwe zestawy instrukcji
- w argumentach szablonu b�dzie podawany sse2, avx, avx2 i od ka�dego implementacja

8. Obiektowo�� - ok, polimorfizm - na wy�szym poziomie.
- polimorficzna mo�na przetwarza� ca�� tablic�
- z za�o�enia funkcja b�dzie si� wywo�ywa� miliony razy, wi�c musi by� inlnie
- polimorfizm b�dzie dok�ada� pewne narzuty, nawet parena�cie % gorszego czasu wykonania
- klasy jak najbardziej, obiektowo mo�na rozwi�za� architektur� klas na wy�szym poziomie
- klasy b�d� reprezentowa�y hashowania dla r�nych zestaw�w instrukcji
- gdyby by�a funkcja przyjmuj�ca jako argument tablic� milion argument�w to to ju�
  mo�e by� polimorficzne
- na ni�szym poziomie, gdzie dziedziczy si� tego hasha ju� nie powinno by� polmorfizmu
- dla ka�dego z wariantu statycznie musi by� okre�lony kt�ra implementacja b�dzie wywo�ywana
- ka�dy wariant implementacji b�dzie musia� by� w innym pliku cpp - sse, avx, avx2 itd. 
  i inne opcje kompilacji b�d� musia�y by� zaznaczane
- tam gdzie b�dzie sse to zaznaczy si� flag�, �e ono mo�e by� wykorzystane
- na pocz�tek w �rodowisku testowym napisa� prosty program gdzie b�d� sumowane 2 tablice
  albo podnoszone do kwadratu
- potem z funkcji, kt�ra podnosi do kwadratu zrobi si� funkcj� haszuj�c�
- architektura klas mo�e pozosta� ta sama, wystarczy podmieni� implementacje
- na bie��co kontrolowa� kompilowalno�� na linuksie, proponowany jest Ubuntu